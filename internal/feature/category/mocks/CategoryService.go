// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Sanchir01/candles_backend/internal/gql/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CategoryService is an autogenerated mock type for the CategoryService type
type CategoryService struct {
	mock.Mock
}

// AllCategories provides a mock function with given fields: ctx
func (_m *CategoryService) AllCategories(ctx context.Context) ([]model.Category, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllCategories")
	}

	var r0 []model.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Category, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryById provides a mock function with given fields: ctx, id
func (_m *CategoryService) CategoryById(ctx context.Context, id uuid.UUID) (*model.Category, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CategoryById")
	}

	var r0 *model.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Category, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Category); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryBySlug provides a mock function with given fields: ctx, slug
func (_m *CategoryService) CategoryBySlug(ctx context.Context, slug string) (*model.Category, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for CategoryBySlug")
	}

	var r0 *model.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Category, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Category); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCategory provides a mock function with given fields: ctx, title, slug
func (_m *CategoryService) CreateCategory(ctx context.Context, title string, slug string) (uuid.UUID, error) {
	ret := _m.Called(ctx, title, slug)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (uuid.UUID, error)); ok {
		return rf(ctx, title, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uuid.UUID); ok {
		r0 = rf(ctx, title, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, title, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategory provides a mock function with given fields: ctx, id
func (_m *CategoryService) DeleteCategory(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (uuid.UUID, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) uuid.UUID); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: ctx, id, name, slug
func (_m *CategoryService) UpdateCategory(ctx context.Context, id uuid.UUID, name string, slug string) (uuid.UUID, error) {
	ret := _m.Called(ctx, id, name, slug)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) (uuid.UUID, error)); ok {
		return rf(ctx, id, name, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) uuid.UUID); ok {
		r0 = rf(ctx, id, name, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, id, name, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategoryService creates a new instance of CategoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryService {
	mock := &CategoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
