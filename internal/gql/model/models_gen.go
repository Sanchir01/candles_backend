// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
)

type AllCategoryResult interface {
	IsAllCategoryResult()
}

type AllColorResult interface {
	IsAllColorResult()
}

type CandlesByIDResult interface {
	IsCandlesByIDResult()
}

type CandlesBySlugResult interface {
	IsCandlesBySlugResult()
}

type CandlesMutationResult interface {
	IsCandlesMutationResult()
}

type CategoryByIDResult interface {
	IsCategoryByIDResult()
}

type CategoryBySlugResult interface {
	IsCategoryBySlugResult()
}

type CategoryCreateResult interface {
	IsCategoryCreateResult()
}

type CategoryGetAllResult interface {
	IsCategoryGetAllResult()
}

type ColorByIDResult interface {
	IsColorByIDResult()
}

type ColorBySlugResult interface {
	IsColorBySlugResult()
}

type ColorCreateResult interface {
	IsColorCreateResult()
}

type LoginResult interface {
	IsLoginResult()
}

type ProblemInterface interface {
	IsProblemInterface()
	GetMessage() string
}

type RegistrationsResult interface {
	IsRegistrationsResult()
}

type TotalCountResolvingResult interface {
	IsTotalCountResolvingResult()
}

type UpdateCategoryResult interface {
	IsUpdateCategoryResult()
}

type UserProfileResult interface {
	IsUserProfileResult()
}

type VersionInterface interface {
	IsVersionInterface()
	GetVersion() uint
}

type AllCandlesOk struct {
	Candles    []*Candles                `json:"candles"`
	TotalCount TotalCountResolvingResult `json:"totalCount"`
}

func (AllCandlesOk) IsAllCategoryResult() {}

type AllColorOk struct {
	Colors []*Color `json:"colors"`
}

func (AllColorOk) IsAllColorResult() {}

type AuthMutations struct {
	Login         LoginResult         `json:"login"`
	Registrations RegistrationsResult `json:"registrations"`
}

type Candles struct {
	ID         uuid.UUID `json:"id"`
	Title      string    `json:"title"`
	Slug       string    `json:"slug"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	Version    uint      `json:"version"`
	Price      int       `json:"price"`
	Images     []string  `json:"images"`
	ColorID    uuid.UUID `json:"color_id"`
	CategoryID uuid.UUID `json:"category_id"`
}

type CandlesByIDInput struct {
	ID uuid.UUID `json:"id"`
}

type CandlesByIDOk struct {
	Candle *Candles `json:"candle"`
}

func (CandlesByIDOk) IsCandlesByIDResult() {}

type CandlesBySlugInput struct {
	Slug string `json:"slug"`
}

type CandlesBySlugOk struct {
	Candle *Candles `json:"candle"`
}

func (CandlesBySlugOk) IsCandlesBySlugResult() {}

type CandlesCreateOk struct {
	ID uuid.UUID `json:"id"`
}

func (CandlesCreateOk) IsCandlesMutationResult() {}

type CandlesFilterInput struct {
	CategoryID []uuid.UUID `json:"categoryId,omitempty"`
	ColorID    []uuid.UUID `json:"colorId,omitempty"`
}

type CandlesMutation struct {
	CreateCandle CandlesMutationResult `json:"createCandle"`
}

type CandlesQuery struct {
	CandleByID   CandlesByIDResult   `json:"candleById"`
	CandleBySlug CandlesBySlugResult `json:"candleBySlug"`
	AllCandles   AllCategoryResult   `json:"allCandles"`
}

type Category struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Slug      string    `json:"slug"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Version   uint      `json:"version"`
}

func (Category) IsVersionInterface()   {}
func (this Category) GetVersion() uint { return this.Version }

type CategoryByIDInput struct {
	ID uuid.UUID `json:"id"`
}

type CategoryByIDOk struct {
	Category *Category `json:"category,omitempty"`
}

func (CategoryByIDOk) IsCategoryByIDResult() {}

type CategoryBySlugInput struct {
	Slug string `json:"slug"`
}

type CategoryBySlugOk struct {
	Category *Category `json:"category,omitempty"`
}

func (CategoryBySlugOk) IsCategoryBySlugResult() {}

type CategoryCreateOk struct {
	ID uuid.UUID `json:"id"`
}

func (CategoryCreateOk) IsCategoryCreateResult() {}

type CategoryGetAllOk struct {
	Category []*Category `json:"category"`
}

func (CategoryGetAllOk) IsCategoryGetAllResult() {}

type CategoryMutation struct {
	CreateCategory CategoryCreateResult `json:"createCategory"`
	UpdateCategory UpdateCategoryResult `json:"updateCategory"`
}

type CategoryQuery struct {
	CategoryBySlug CategoryBySlugResult `json:"categoryBySlug"`
	CategoryByID   CategoryByIDResult   `json:"categoryById"`
	GetAllCategory CategoryGetAllResult `json:"getAllCategory"`
}

type Color struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Slug      string    `json:"slug"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Version   uint      `json:"version"`
}

type ColorByIDInput struct {
	ID uuid.UUID `json:"id"`
}

type ColorByIDOk struct {
	Colors *Color `json:"colors"`
}

func (ColorByIDOk) IsColorByIDResult() {}

type ColorBySlugInput struct {
	Slug string `json:"slug"`
}

type ColorBySlugOk struct {
	Colors *Color `json:"colors"`
}

func (ColorBySlugOk) IsColorBySlugResult() {}

type ColorCreateOk struct {
	ID uuid.UUID `json:"id"`
}

func (ColorCreateOk) IsColorCreateResult() {}

type ColorMutation struct {
	CreateColor ColorCreateResult `json:"createColor"`
}

type ColorQuery struct {
	AllColor      AllColorResult    `json:"allColor"`
	ColorByManyID ColorByIDResult   `json:"colorByManyId"`
	ColorBySlug   ColorBySlugResult `json:"colorBySlug"`
}

type CreateCandleInput struct {
	Title      string            `json:"title"`
	Price      int               `json:"price"`
	CategoryID uuid.UUID         `json:"category_id"`
	ColorID    uuid.UUID         `json:"color_id"`
	Images     []*graphql.Upload `json:"images"`
}

type CreateCategoryInput struct {
	Title string `json:"title"`
}

type CreateColorInput struct {
	Title string `json:"title"`
}

type InternalErrorProblem struct {
	Message string `json:"message"`
}

func (InternalErrorProblem) IsLoginResult() {}

func (InternalErrorProblem) IsRegistrationsResult() {}

func (InternalErrorProblem) IsCandlesMutationResult() {}

func (InternalErrorProblem) IsCandlesByIDResult() {}

func (InternalErrorProblem) IsCandlesBySlugResult() {}

func (InternalErrorProblem) IsAllCategoryResult() {}

func (InternalErrorProblem) IsTotalCountResolvingResult() {}

func (InternalErrorProblem) IsCategoryCreateResult() {}

func (InternalErrorProblem) IsUpdateCategoryResult() {}

func (InternalErrorProblem) IsCategoryBySlugResult() {}

func (InternalErrorProblem) IsCategoryByIDResult() {}

func (InternalErrorProblem) IsCategoryGetAllResult() {}

func (InternalErrorProblem) IsColorCreateResult() {}

func (InternalErrorProblem) IsAllColorResult() {}

func (InternalErrorProblem) IsColorByIDResult() {}

func (InternalErrorProblem) IsColorBySlugResult() {}

func (InternalErrorProblem) IsProblemInterface()     {}
func (this InternalErrorProblem) GetMessage() string { return this.Message }

func (InternalErrorProblem) IsUserProfileResult() {}

type InvalidSortRankProblem struct {
	Message string `json:"message"`
}

func (InvalidSortRankProblem) IsProblemInterface()     {}
func (this InvalidSortRankProblem) GetMessage() string { return this.Message }

type LoginInput struct {
	Phone string `json:"phone"`
}

type LoginOk struct {
	ID         uuid.UUID `json:"id"`
	VerifyCode string    `json:"verify_code"`
	Phone      string    `json:"phone"`
	Role       Role      `json:"role"`
}

func (LoginOk) IsLoginResult() {}

type Mutation struct {
}

type Query struct {
}

type RegistrationsInput struct {
	Phone string `json:"phone"`
	Role  string `json:"role"`
	Title string `json:"title"`
}

type RegistrationsOk struct {
	ID         uuid.UUID `json:"id"`
	VerifyCode string    `json:"verify_code"`
	Phone      string    `json:"phone"`
	Role       Role      `json:"role"`
}

func (RegistrationsOk) IsRegistrationsResult() {}

type SortRankInput struct {
	Prev string `json:"prev"`
	Next string `json:"next"`
}

type TotalCountResolvingOk struct {
	TotalCount uint `json:"totalCount"`
}

func (TotalCountResolvingOk) IsTotalCountResolvingResult() {}

type UnauthorizedProblem struct {
	Message string `json:"message"`
}

func (UnauthorizedProblem) IsCandlesMutationResult() {}

func (UnauthorizedProblem) IsCategoryCreateResult() {}

func (UnauthorizedProblem) IsColorCreateResult() {}

func (UnauthorizedProblem) IsProblemInterface()     {}
func (this UnauthorizedProblem) GetMessage() string { return this.Message }

type UpdateCategoryInput struct {
	Title string `json:"title"`
}

type UpdateCategoryOk struct {
	ID uuid.UUID `json:"id"`
}

func (UpdateCategoryOk) IsUpdateCategoryResult() {}

type User struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Slug      string    `json:"slug"`
	Version   uint      `json:"version"`
	Phone     string    `json:"phone"`
	Role      Role      `json:"role"`
}

type UserProfileOk struct {
	Profile *User `json:"profile"`
}

func (UserProfileOk) IsUserProfileResult() {}

type UserQuery struct {
	Profile UserProfileResult `json:"profile"`
}

type VersionMismatchProblem struct {
	Message string `json:"message"`
}

func (VersionMismatchProblem) IsLoginResult() {}

func (VersionMismatchProblem) IsRegistrationsResult() {}

func (VersionMismatchProblem) IsCandlesMutationResult() {}

func (VersionMismatchProblem) IsCandlesByIDResult() {}

func (VersionMismatchProblem) IsCandlesBySlugResult() {}

func (VersionMismatchProblem) IsAllCategoryResult() {}

func (VersionMismatchProblem) IsTotalCountResolvingResult() {}

func (VersionMismatchProblem) IsCategoryCreateResult() {}

func (VersionMismatchProblem) IsUpdateCategoryResult() {}

func (VersionMismatchProblem) IsCategoryBySlugResult() {}

func (VersionMismatchProblem) IsCategoryByIDResult() {}

func (VersionMismatchProblem) IsColorCreateResult() {}

func (VersionMismatchProblem) IsAllColorResult() {}

func (VersionMismatchProblem) IsColorByIDResult() {}

func (VersionMismatchProblem) IsColorBySlugResult() {}

func (VersionMismatchProblem) IsUserProfileResult() {}

func (VersionMismatchProblem) IsProblemInterface()     {}
func (this VersionMismatchProblem) GetMessage() string { return this.Message }

type CandlesSortEnum string

const (
	CandlesSortEnumCreatedAtAsc  CandlesSortEnum = "CREATED_AT_ASC"
	CandlesSortEnumCreatedAtDesc CandlesSortEnum = "CREATED_AT_DESC"
	CandlesSortEnumSortRankAsc   CandlesSortEnum = "SORT_RANK_ASC"
	CandlesSortEnumSortRankDesc  CandlesSortEnum = "SORT_RANK_DESC"
	CandlesSortEnumPriceAsc      CandlesSortEnum = "PRICE_ASC"
	CandlesSortEnumPriceDesc     CandlesSortEnum = "PRICE_DESC"
)

var AllCandlesSortEnum = []CandlesSortEnum{
	CandlesSortEnumCreatedAtAsc,
	CandlesSortEnumCreatedAtDesc,
	CandlesSortEnumSortRankAsc,
	CandlesSortEnumSortRankDesc,
	CandlesSortEnumPriceAsc,
	CandlesSortEnumPriceDesc,
}

func (e CandlesSortEnum) IsValid() bool {
	switch e {
	case CandlesSortEnumCreatedAtAsc, CandlesSortEnumCreatedAtDesc, CandlesSortEnumSortRankAsc, CandlesSortEnumSortRankDesc, CandlesSortEnumPriceAsc, CandlesSortEnumPriceDesc:
		return true
	}
	return false
}

func (e CandlesSortEnum) String() string {
	return string(e)
}

func (e *CandlesSortEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandlesSortEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandlesSortEnum", str)
	}
	return nil
}

func (e CandlesSortEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
	RoleGuest Role = "GUEST"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
	RoleGuest,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser, RoleGuest:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
