package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"

	"github.com/Sanchir01/candles_backend/internal/feature/user"
	"github.com/Sanchir01/candles_backend/internal/gql/model"
	customMiddleware "github.com/Sanchir01/candles_backend/internal/handlers/middleware"
	responseErr "github.com/Sanchir01/candles_backend/pkg/lib/api/response"
	"github.com/Sanchir01/candles_backend/pkg/lib/utils"
)

// Login is the resolver for the login field.
func (r *authMutationsResolver) Login(ctx context.Context, obj *model.AuthMutations, input model.LoginInput) (model.LoginResult, error) {
	if err := utils.VerifyEmail(input.Email); err != nil {
		r.env.Logger.Error("login error", err.Error())
		return responseErr.NewInternalErrorProblem("не удалось залогининться"), err
	}

	userdb, err := r.env.Services.UserService.UserByEmail(ctx, input.Email, input.Password)
	if err != nil {
		r.env.Logger.Error("login error", err.Error())
		return responseErr.NewInternalErrorProblem("не удалось залогининться"), err
	}

	w := customMiddleware.GetResponseWriter(ctx)
	if err = user.AddCookieTokens(userdb.ID, userdb.Role, w, r.env.Config.Domain); err != nil {
		r.env.Logger.Error("login error", err.Error())
		return nil, nil
	}

	return model.LoginOk{Phone: userdb.Phone, Email: userdb.Email, Title: userdb.Title, Role: userdb.Role}, nil
}
