package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"errors"
	pgstoreauth "github.com/Sanchir01/candles_backend/internal/database/postgres/auth"
	"github.com/jackc/pgx/v5"

	userFeature "github.com/Sanchir01/candles_backend/internal/feature/user"
	"github.com/Sanchir01/candles_backend/internal/gql/model"
	customMiddleware "github.com/Sanchir01/candles_backend/internal/handlers/middleware"
	responseErr "github.com/Sanchir01/candles_backend/pkg/lib/api/response"
	"github.com/Sanchir01/candles_backend/pkg/lib/utils"
)

// Registrations is the resolver for the registrations field.
func (r *authMutationsResolver) Registrations(ctx context.Context, obj *model.AuthMutations, input model.RegistrationsInput) (model.RegistrationsResult, error) {
	conn, err := r.pgxdb.Acquire(ctx)
	if err != nil {
		return responseErr.NewInternalErrorProblem("ошибка при взятия пула подключений в бд"), nil
	}
	defer conn.Release()
	tx, err := conn.BeginTx(ctx, pgx.TxOptions{})
	if err != nil {
		return responseErr.NewInternalErrorProblem("ошибка при создании транзакции"), nil
	}
	defer func() {
		if err != nil {
			rollbackErr := tx.Rollback(ctx)
			if rollbackErr != nil {
				err = errors.Join(err, rollbackErr)
			}
		}
	}()

	slug, err := utils.Slugify(input.Title)
	if err != nil {
		return responseErr.NewInternalErrorProblem("error for creating slug"), nil
	}
	user, err := pgstoreauth.Register(ctx, input.Title, input.Phone, slug, input.Role, tx)
	if err != nil {
		r.lg.Error(err.Error())
		return responseErr.NewInternalErrorProblem("error for creating user"), err
	}
	w := customMiddleware.GetResponseWriter(ctx)
	if err = userFeature.AddCookieTokens(user.ID, user.Role, w); err != nil {
		r.lg.Error("login errors", err)
		return responseErr.NewInternalErrorProblem("Error for generating jwt tokens"), nil
	}
	if err := tx.Commit(ctx); err != nil {
		return responseErr.NewInternalErrorProblem("ошибка во время коммита транзакции"), err
	}
	return model.RegistrationsOk{ID: user.ID, Phone: user.Phone, VerifyCode: "sdad"}, nil
}
