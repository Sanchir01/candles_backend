package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"

	"github.com/Sanchir01/candles_backend/internal/feature/user"
	"github.com/Sanchir01/candles_backend/internal/gql/model"
	customMiddleware "github.com/Sanchir01/candles_backend/internal/handlers/middleware"
	responseErr "github.com/Sanchir01/candles_backend/pkg/lib/api/response"
	pgx "github.com/jackc/pgx/v5"
)

// Registrations is the resolver for the registrations field.
func (r *authMutationsResolver) Registrations(ctx context.Context, obj *model.AuthMutations, input model.RegistrationsInput) (model.RegistrationsResult, error) {
	conn, err := r.env.DataBase.PrimaryDB.Acquire(ctx)
	if err != nil {
		return nil, err
	}
	defer conn.Release()
	tx, err := conn.BeginTx(ctx, pgx.TxOptions{})
	if err != nil {
		return nil, err
	}
	defer func() {
		if err != nil {
			rollbackErr := tx.Rollback(ctx)
			if rollbackErr != nil {
				err = errors.Join(err, rollbackErr)
				return
			}
		}
	}()

	usersdb, err := r.env.Services.UserService.Registrations(ctx, input.Password, input.Phone, input.Title, input.Email, tx)
	if err != nil {
		r.env.Logger.Error("register errors", err.Error())
		return responseErr.NewInternalErrorProblem("не удалось зарегистрироваться"), err
	}
	r.env.Logger.Warn("register usersdb")
	w := customMiddleware.GetResponseWriter(ctx)
	if err = user.AddCookieTokens(usersdb.ID, usersdb.Role, w); err != nil {
		r.env.Logger.Error("register errors", err)
		return responseErr.NewInternalErrorProblem("Error for generating jwt tokens"), err
	}
	if err := tx.Commit(ctx); err != nil {
		return nil, err
	}
	return model.RegistrationsOk{Email: usersdb.Email, Phone: usersdb.Phone, Title: usersdb.Title, Role: usersdb.Role}, err
}
