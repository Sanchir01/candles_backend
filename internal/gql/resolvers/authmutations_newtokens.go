package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"time"

	"github.com/Sanchir01/candles_backend/internal/feature/user"
	"github.com/Sanchir01/candles_backend/internal/gql/model"
	customMiddleware "github.com/Sanchir01/candles_backend/internal/handlers/middleware"
	responseErr "github.com/Sanchir01/candles_backend/pkg/lib/api/response"
)

// NewTokens is the resolver for the newTokens field.
func (r *authMutationsResolver) NewTokens(ctx context.Context, obj *model.AuthMutations) (model.NewTokensResult, error) {
	userCookie, err := customMiddleware.GetJWTClaimsFromCtx(ctx)
	if err != nil {
		return responseErr.NewInternalErrorProblem("не удалось получить профиль из куки"), nil
	}

	expirationTimeAccess := time.Now().Add(15 * time.Minute)
	token, err := user.GenerateJwtToken(userCookie.ID, userCookie.Role, expirationTimeAccess)
	if err != nil {
		r.env.Logger.Error("register errors", err.Error())
		return responseErr.NewInternalErrorProblem("Error for generating jwt tokens"), nil
	}
	return model.NewTokensOk{
		Token: token,
	}, nil
}
