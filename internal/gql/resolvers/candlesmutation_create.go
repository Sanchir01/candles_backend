package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"github.com/Sanchir01/candles_backend/internal/gql/model"
	responseErr "github.com/Sanchir01/candles_backend/pkg/lib/api/response"
	"github.com/Sanchir01/candles_backend/pkg/lib/utils"
)

// CreateCandle is the resolver for the createCandle field.
func (r *candlesMutationResolver) CreateCandle(ctx context.Context, obj *model.CandlesMutation, input model.CreateCandleInput) (model.CandlesMutationResult, error) {
	slug, err := utils.Slugify(input.Title)
	if err != nil {
		return responseErr.NewInternalErrorProblem("не удалось создат слаг"), err
	}
	_, err = r.candlesStr.CandlesById(ctx, input.CategoryID)
	if err == nil {
		return responseErr.NewInternalErrorProblem("товар с таким айди уже есть"), err
	}
	_, err = r.candlesStr.CandlesBySlug(ctx, slug)
	if err == nil {
		return responseErr.NewInternalErrorProblem("такая категория уже есть"), err
	}

	s3urliamge, err := r.s3store.PutObjects(ctx, input.Images)
	if err != nil {
		r.lg.Warn("error  s3", err.Error())
		return responseErr.NewInternalErrorProblem("ошибка при загрузке s3"), nil
	}
	r.lg.Warn("image urls", s3urliamge)

	testImages := make([]string, 0)
	testing := append(testImages, "test", "sdadd")
	id, err := r.candlesStr.CreateCandles(ctx, input.CategoryID, input.ColorID, input.Title, slug, testing, input.Price)
	if err != nil {
		return responseErr.NewInternalErrorProblem("ошибка во время создания свечи"), err
	}
	return &model.CandlesCreateOk{
		ID: id,
	}, nil
}
