package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"log/slog"

	"github.com/99designs/gqlgen/graphql"
	runtime "github.com/Sanchir01/candles_backend/internal/gql/generated"
	"github.com/Sanchir01/candles_backend/internal/gql/model"
	responseErr "github.com/Sanchir01/candles_backend/pkg/lib/api/response"
)

// TotalCount is the resolver for the totalCount field.
func (r *allCandlesOkResolver) TotalCount(ctx context.Context, obj *model.AllCandlesOk, estimate uint) (model.TotalCountResolvingResult, error) {
	filter := graphql.GetFieldContext(ctx).Parent.Args["filter"].(*model.CandlesFilterInput)

	count, err := r.env.Services.CandlesService.GetTotalCountCandles(ctx, filter)
	if err != nil {
		return nil, err
	}
	return model.TotalCountResolvingOk{TotalCount: count}, nil
}

// AllCandles is the resolver for the allCandles field.
func (r *candlesQueryResolver) AllCandles(ctx context.Context, obj *model.CandlesQuery, filter *model.CandlesFilterInput, sort *model.CandlesSortEnum, pageSize uint, pageNumber uint) (model.AllCategoryResult, error) {
	//todo:delete logger
	r.env.Logger.Warn("filter resolver", filter)
	r.env.Logger.Warn("currentPage:", pageNumber)
	allCandles, err := r.env.Services.CandlesService.AllCandles(ctx, sort, filter, pageSize, pageNumber)
	if err != nil {
		r.env.Logger.Error(err.Error())
		return responseErr.NewInternalErrorProblem("не удалось получить товары"), err
	}

	totalCount := len(allCandles)
	slog.Warn("totalCount:", totalCount)
	currentPage := 1
	nextPage := (currentPage * int(pageSize)) < totalCount

	return model.AllCandlesOk{Candles: allCandles, PrevPage: false, NextPage: nextPage, Page: int(pageNumber + 1)}, nil
}

// AllCandlesOk returns runtime.AllCandlesOkResolver implementation.
func (r *Resolver) AllCandlesOk() runtime.AllCandlesOkResolver { return &allCandlesOkResolver{r} }

type allCandlesOkResolver struct{ *Resolver }
