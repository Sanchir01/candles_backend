package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	runtime "github.com/Sanchir01/candles_backend/internal/gql/generated"
	"github.com/Sanchir01/candles_backend/internal/gql/model"
	responseErr "github.com/Sanchir01/candles_backend/pkg/lib/api/response"
)

// TotalCount is the resolver for the totalCount field.
func (r *allCandlesOkResolver) TotalCount(ctx context.Context, obj *model.AllCandlesOk, estimate uint) (model.TotalCountResolvingResult, error) {
	panic(fmt.Errorf("not implemented: TotalCount - totalCount"))
	//filter := graphql.GetFieldContext(ctx).Parent.Args["filter"].(*model)
}

// AllCandles is the resolver for the allCandles field.
func (r *candlesQueryResolver) AllCandles(ctx context.Context, obj *model.CandlesQuery) (model.AllCategoryResult, error) {
	allCandles, err := r.env.Services.CandlesService.AllCandles(ctx)

	if err != nil {
		r.env.Logger.Error(err.Error())
		return responseErr.NewInternalErrorProblem("не удалось получить товары"), err
	}
	return model.AllCandlesOk{Candles: allCandles}, nil
}

// AllCandlesOk returns runtime.AllCandlesOkResolver implementation.
func (r *Resolver) AllCandlesOk() runtime.AllCandlesOkResolver { return &allCandlesOkResolver{r} }

type allCandlesOkResolver struct{ *Resolver }
