package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	runtime "github.com/Sanchir01/candles_backend/internal/gql/generated"
	"github.com/Sanchir01/candles_backend/internal/gql/model"
	responseErr "github.com/Sanchir01/candles_backend/pkg/lib/api/response"
	"github.com/google/uuid"
)

// TotalCount is the resolver for the totalCount field.
func (r *allCandlesOkResolver) TotalCount(ctx context.Context, obj *model.AllCandlesOk, estimate uint) (model.TotalCountResolvingResult, error) {
	return model.TotalCountResolvingOk{
		TotalCount: uint(1),
	}, nil
}

// AllCandles is the resolver for the allCandles field.
func (r *candlesQueryResolver) AllCandles(ctx context.Context, obj *model.CandlesQuery, filter *model.CandlesFilterInput, sort *model.CandlesSortEnum, pageSize uint, pageNumber uint) (model.AllCategoryResult, error) {
	var categoryId uuid.UUID
	var colorId uuid.UUID
	if filter.ColorID != nil {
		categoryId = *filter.ColorID
	}
	if filter.CategoryID != nil {
		categoryId = *filter.CategoryID
	}
	//todo:delete logger
	r.env.Logger.Warn("filter", filter.ColorID)
	allCandles, err := r.env.Services.CandlesService.AllCandles(ctx, sort, categoryId, colorId)

	if err != nil {
		r.env.Logger.Error(err.Error())
		return responseErr.NewInternalErrorProblem("не удалось получить товары"), err
	}

	return model.AllCandlesOk{Candles: allCandles}, nil
}

// AllCandlesOk returns runtime.AllCandlesOkResolver implementation.
func (r *Resolver) AllCandlesOk() runtime.AllCandlesOkResolver { return &allCandlesOkResolver{r} }

type allCandlesOkResolver struct{ *Resolver }
