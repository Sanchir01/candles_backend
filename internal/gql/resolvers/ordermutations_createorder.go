package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"encoding/json"
	"errors"
	"log/slog"

	"github.com/Sanchir01/candles_backend/internal/feature/order"
	"github.com/Sanchir01/candles_backend/internal/gql/model"
	customMiddleware "github.com/Sanchir01/candles_backend/internal/handlers/middleware"
	responseErr "github.com/Sanchir01/candles_backend/pkg/lib/api/response"
	"github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
)

// CreateOrder is the resolver for the createOrder field.
func (r *orderMutationsResolver) CreateOrder(ctx context.Context, obj *model.OrderMutations, input model.CreateOrderInput) (model.CreateOrderResult, error) {
	_, err := customMiddleware.GetJWTClaimsFromCtx(ctx)
	if err != nil {
		return responseErr.NewInternalErrorProblem("не удалось получить профиль"), err
	}
	conn, err := r.env.DataBase.PrimaryDB.Acquire(ctx)
	if err != nil {
		return responseErr.NewInternalErrorProblem("Database connection error"), nil
	}
	tx, err := conn.BeginTx(ctx, pgx.TxOptions{})
	defer func(ctx context.Context) {
		if err != nil {
			rollbackErr := tx.Rollback(ctx)
			if rollbackErr != nil {
				err = errors.Join(err, rollbackErr)
				r.env.Logger.Error("rollback transaction: %v", err.Error())
				return
			}
		}
	}(ctx)

	var productsId []uuid.UUID
	var quantities []int
	var prices []int

	for _, product := range input.Items {
		productsId = append(productsId, product.ProductsID)
		quantities = append(quantities, product.Quantity)
		prices = append(prices, product.Price)

	}
	//ids, err := r.env.Services.OrderService.CreateOrder(ctx, tx, userCookie.ID, "processing", productsId, quantities, prices)
	//if err != nil {
	//	r.env.Logger.Warn("Failed to create order: %v", err.Error())
	//	return responseErr.NewInternalErrorProblem("не удалось создать заказ"), err
	//}
	//r.env.Logger.Warn("order items ids", ids)
	product, err := r.env.Repositories.CandlesRepository.CandleByManyIds(ctx, tx, productsId)
	if err != nil {
		r.env.Logger.Warn("Failed to get all candles many ids: %v", err.Error())
		return nil, err
	}

	var productsWithQuantities []order.ProductWithQuantity
	for i, p := range product {
		productsWithQuantities = append(productsWithQuantities, order.ProductWithQuantity{
			Title:    p,
			Quantity: quantities[i],
		})
	}
	slog.Any("produst", product)
	jsondata, err := json.Marshal(productsWithQuantities)
	if err != nil {
		r.env.Logger.Warn("Failed to get all candles many ids: %v", err.Error())
		return nil, err
	}

	if err := r.env.KafkaProducer.Produce("order.sendtg", jsondata); err != nil {
		r.env.Logger.Warn("Failed to produce order.sendtg: %v", err.Error())
		return nil, err
	}
	if err := tx.Commit(ctx); err != nil {
		r.env.Logger.Warn("Failed to commit transaction: %v", err.Error())
		return nil, err
	}

	return model.CreateOrderOk{
		Ok: "success",
	}, nil
}
