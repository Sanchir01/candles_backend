package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"github.com/Sanchir01/candles_backend/internal/gql/model"
	customMiddleware "github.com/Sanchir01/candles_backend/internal/handlers/middleware"
	responseErr "github.com/Sanchir01/candles_backend/pkg/lib/api/response"
	"github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
)

// CreateOrder is the resolver for the createOrder field.
func (r *orderMutationsResolver) CreateOrder(ctx context.Context, obj *model.OrderMutations, input model.CreateOrderInput) (model.CreateOrderResult, error) {
	conn, err := r.env.DataBase.PrimaryDB.Acquire(ctx)

	if err != nil {
		return responseErr.NewInternalErrorProblem("Database connection error"), nil
	}
	tx, err := conn.BeginTx(ctx, pgx.TxOptions{})
	defer func() {
		if err != nil {
			rollbackErr := tx.Rollback(ctx)
			if rollbackErr != nil {
				err = errors.Join(err, rollbackErr)
				return
			}
		}
	}()
	userCookie, err := customMiddleware.GetJWTClaimsFromCtx(ctx)
	if err != nil {
		return responseErr.NewInternalErrorProblem("не удалось получить профиль"), err
	}

	var productsId []uuid.UUID
	var quantities []int
	var prices []int

	for _, product := range input.Items {
		productsId = append(productsId, product.ProductsID)
		quantities = append(quantities, product.Quantity)
		prices = append(prices, product.Price)

	}

	_, err = r.env.Services.OrderService.CreateOrder(ctx, tx, userCookie.ID, "processing", productsId, quantities, prices)
	if err != nil {
		return responseErr.NewInternalErrorProblem("не удалось создать заказ"), err
	}
	if err := tx.Commit(ctx); err != nil {
		return nil, err
	}
	return model.CreateOrderOk{
		Ok: "",
	}, nil
}

